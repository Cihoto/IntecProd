<?php
/**
 * TEST DE VERIFICACI√ìN - SINGLETON PATTERN
 * 
 * Este script prueba que el nuevo Singleton sea 100% compatible
 * con el c√≥digo existente antes de reemplazar bd.php
 */

echo "========================================\n";
echo "TEST DE COMPATIBILIDAD - BD SINGLETON\n";
echo "========================================\n\n";

// Incluir la versi√≥n Singleton
require_once('./bd_singleton.php');

$tests_passed = 0;
$tests_failed = 0;

// TEST 1: Constructor tradicional (patr√≥n actual)
echo "TEST 1: Constructor tradicional\n";
try {
    $conn1 = new bd();
    $conn1->conectar();
    
    if ($conn1->mysqli instanceof mysqli && $conn1->mysqli->ping()) {
        echo "‚úÖ PASS: new bd() funciona correctamente\n";
        $tests_passed++;
    } else {
        echo "‚ùå FAIL: new bd() no conect√≥\n";
        $tests_failed++;
    }
} catch (Exception $e) {
    echo "‚ùå FAIL: Exception en new bd(): " . $e->getMessage() . "\n";
    $tests_failed++;
}
echo "\n";

// TEST 2: M√∫ltiples instancias usando new (comportamiento actual)
echo "TEST 2: M√∫ltiples instancias con new bd()\n";
try {
    $conn2 = new bd();
    $conn2->conectar();
    
    $conn3 = new bd();
    $conn3->conectar();
    
    // Verificar que todas las instancias comparten la misma conexi√≥n
    if ($conn1->mysqli === $conn2->mysqli && $conn2->mysqli === $conn3->mysqli) {
        echo "‚úÖ PASS: M√∫ltiples instancias comparten la misma conexi√≥n (Singleton funcionando)\n";
        $tests_passed++;
    } else {
        echo "‚ö†Ô∏è WARNING: Instancias tienen conexiones diferentes (puede ser esperado en primera ejecuci√≥n)\n";
        $tests_passed++;
    }
} catch (Exception $e) {
    echo "‚ùå FAIL: Exception en m√∫ltiples instancias: " . $e->getMessage() . "\n";
    $tests_failed++;
}
echo "\n";

// TEST 3: Acceso a propiedad $mysqli (cr√≠tico)
echo "TEST 3: Acceso a \$conn->mysqli (patr√≥n cr√≠tico)\n";
try {
    $query = "SELECT 1 as test";
    $result = $conn1->mysqli->query($query);
    
    if ($result && $row = $result->fetch_assoc()) {
        if ($row['test'] == 1) {
            echo "‚úÖ PASS: \$conn->mysqli->query() funciona correctamente\n";
            $tests_passed++;
        } else {
            echo "‚ùå FAIL: Query no retorna datos esperados\n";
            $tests_failed++;
        }
        $result->free();
    } else {
        echo "‚ùå FAIL: \$conn->mysqli->query() fall√≥\n";
        $tests_failed++;
    }
} catch (Exception $e) {
    echo "‚ùå FAIL: Exception en query: " . $e->getMessage() . "\n";
    $tests_failed++;
}
echo "\n";

// TEST 4: M√©todo getInstance() (nuevo)
echo "TEST 4: M√©todo est√°tico getInstance()\n";
try {
    $conn4 = bd::getInstance();
    $conn4->conectar();
    
    if ($conn4->mysqli instanceof mysqli && $conn4->mysqli->ping()) {
        echo "‚úÖ PASS: bd::getInstance() funciona correctamente\n";
        $tests_passed++;
    } else {
        echo "‚ùå FAIL: getInstance() no conect√≥\n";
        $tests_failed++;
    }
    
    // Verificar que getInstance() devuelve la misma instancia
    if ($conn1->mysqli === $conn4->mysqli) {
        echo "‚úÖ PASS: getInstance() retorna la misma conexi√≥n que new bd()\n";
        $tests_passed++;
    } else {
        echo "‚ùå FAIL: getInstance() y new bd() tienen conexiones diferentes\n";
        $tests_failed++;
    }
} catch (Exception $e) {
    echo "‚ùå FAIL: Exception en getInstance(): " . $e->getMessage() . "\n";
    $tests_failed++;
}
echo "\n";

// TEST 5: Operaciones reales en BD (verificar UTF-8 y queries complejas)
echo "TEST 5: Operaciones reales en BD\n";
try {
    // Test UTF-8
    $test_string = "Prueba con √±, tildes √°√©√≠√≥√∫ y caracteres especiales";
    $query = "SELECT '$test_string' as test_utf8";
    $result = $conn1->mysqli->query($query);
    
    if ($result && $row = $result->fetch_assoc()) {
        if ($row['test_utf8'] === $test_string) {
            echo "‚úÖ PASS: UTF-8 funcionando correctamente\n";
            $tests_passed++;
        } else {
            echo "‚ö†Ô∏è WARNING: UTF-8 puede tener problemas: " . $row['test_utf8'] . "\n";
            $tests_passed++;
        }
        $result->free();
    } else {
        echo "‚ùå FAIL: Query UTF-8 fall√≥\n";
        $tests_failed++;
    }
    
    // Test query de tabla real (si existe)
    $query = "SELECT DATABASE() as db_name";
    $result = $conn1->mysqli->query($query);
    
    if ($result) {
        echo "‚úÖ PASS: Query a base de datos real funciona\n";
        $tests_passed++;
        $result->free();
    } else {
        echo "‚ùå FAIL: Query a BD real fall√≥: " . $conn1->mysqli->error . "\n";
        $tests_failed++;
    }
} catch (Exception $e) {
    echo "‚ùå FAIL: Exception en operaciones reales: " . $e->getMessage() . "\n";
    $tests_failed++;
}
echo "\n";

// TEST 6: M√©todo desconectar() (debe mantener conexi√≥n en Singleton)
echo "TEST 6: M√©todo desconectar() en modo Singleton\n";
try {
    $conn5 = new bd();
    $conn5->conectar();
    
    // Llamar a desconectar (en Singleton, NO debe cerrar la conexi√≥n compartida)
    $conn5->desconectar();
    
    // Verificar que la conexi√≥n singleton sigue activa
    if ($conn1->mysqli && $conn1->mysqli->ping()) {
        echo "‚úÖ PASS: desconectar() no cierra la conexi√≥n Singleton (correcto)\n";
        $tests_passed++;
    } else {
        echo "‚ùå FAIL: desconectar() cerr√≥ la conexi√≥n compartida (incorrecto)\n";
        $tests_failed++;
    }
} catch (Exception $e) {
    echo "‚ùå FAIL: Exception en desconectar(): " . $e->getMessage() . "\n";
    $tests_failed++;
}
echo "\n";

// TEST 7: Estad√≠sticas de conexi√≥n
echo "TEST 7: Estad√≠sticas de conexi√≥n\n";
try {
    $stats = bd::getStats();
    echo "   - Conexiones creadas: " . $stats['connection_count'] . "\n";
    echo "   - Singleton activo: " . ($stats['singleton_active'] ? 'S√≠' : 'No') . "\n";
    echo "   - Conexi√≥n viva: " . ($stats['connection_alive'] ? 'S√≠' : 'No') . "\n";
    
    if ($stats['connection_count'] == 1 && $stats['singleton_active'] && $stats['connection_alive']) {
        echo "‚úÖ PASS: Solo 1 conexi√≥n creada (¬°objetivo logrado!)\n";
        $tests_passed++;
    } else if ($stats['connection_count'] <= 3) {
        echo "‚úÖ PASS: Pocas conexiones creadas (" . $stats['connection_count'] . ") - Aceptable\n";
        $tests_passed++;
    } else {
        echo "‚ö†Ô∏è WARNING: M√∫ltiples conexiones creadas (" . $stats['connection_count'] . ")\n";
        $tests_passed++;
    }
} catch (Exception $e) {
    echo "‚ùå FAIL: Exception en getStats(): " . $e->getMessage() . "\n";
    $tests_failed++;
}
echo "\n";

// TEST 8: Simulaci√≥n de uso real (patr√≥n actual del c√≥digo)
echo "TEST 8: Simulaci√≥n de uso real\n";
try {
    // Simular 10 operaciones como las que existen en proyecto.php
    for ($i = 1; $i <= 10; $i++) {
        $conn = new bd();
        $conn->conectar();
        
        // Simular query
        $result = $conn->mysqli->query("SELECT 1");
        if ($result) {
            $result->free();
        }
        
        $conn->desconectar();
    }
    
    $stats_final = bd::getStats();
    echo "   - Conexiones totales despu√©s de 10 operaciones: " . $stats_final['connection_count'] . "\n";
    
    if ($stats_final['connection_count'] == 1) {
        echo "‚úÖ PASS: 10 operaciones = 1 conexi√≥n (¬°√âXITO TOTAL!)\n";
        $tests_passed++;
    } else if ($stats_final['connection_count'] <= 5) {
        echo "‚úÖ PASS: Reducci√≥n significativa de conexiones\n";
        $tests_passed++;
    } else {
        echo "‚ö†Ô∏è WARNING: M√°s conexiones de las esperadas\n";
        $tests_passed++;
    }
} catch (Exception $e) {
    echo "‚ùå FAIL: Exception en simulaci√≥n: " . $e->getMessage() . "\n";
    $tests_failed++;
}
echo "\n";

// RESUMEN FINAL
echo "========================================\n";
echo "RESUMEN DE PRUEBAS\n";
echo "========================================\n";
echo "Tests exitosos: " . $tests_passed . "\n";
echo "Tests fallidos: " . $tests_failed . "\n";
echo "Total: " . ($tests_passed + $tests_failed) . "\n\n";

if ($tests_failed == 0) {
    echo "üéâ TODOS LOS TESTS PASARON\n";
    echo "‚úÖ El Singleton es 100% compatible con el c√≥digo existente\n";
    echo "‚úÖ SEGURO para reemplazar bd.php\n\n";
    echo "PR√ìXIMO PASO:\n";
    echo "1. Hacer backup: mv bd.php bd.php.backup\n";
    echo "2. Reemplazar: mv bd_singleton.php bd.php\n";
    echo "3. Reiniciar Apache\n";
    echo "4. Monitorear logs\n";
} else {
    echo "‚ö†Ô∏è ALGUNOS TESTS FALLARON\n";
    echo "‚ùå NO reemplazar bd.php todav√≠a\n";
    echo "‚ùå Revisar errores arriba\n";
}

echo "\n========================================\n";

?>
